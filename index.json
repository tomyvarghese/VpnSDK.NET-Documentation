{
  "api/VpnSDK.Public.Exceptions.VpnSDKOAuthException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKOAuthException.html",
    "title": "Class VpnSDKOAuthException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKOAuthException Exception VpnSDKOAuthException. Fired when SDK is unable to refresh the access token. Inheritance Object Exception VpnSDKBaseException VpnSDKOAuthException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKOAuthException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKOAuthException(String) Initializes a new instance of the VpnSDKOAuthException class. Declaration public VpnSDKOAuthException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKOAuthException(String, Exception) Initializes a new instance of the VpnSDKOAuthException class. Declaration public VpnSDKOAuthException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKConnectionTerminatedException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKConnectionTerminatedException.html",
    "title": "Class VpnSDKConnectionTerminatedException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKConnectionTerminatedException Exception VpnSDKConnectionTerminatedException. Fires when a VPN connection is terminated by an external source. Inheritance Object Exception VpnSDKBaseException VpnSDKConnectionTerminatedException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKConnectionTerminatedException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKConnectionTerminatedException(String) Initializes a new instance of the VpnSDKConnectionTerminatedException class. Declaration public VpnSDKConnectionTerminatedException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKConnectionTerminatedException(String, Exception) Initializes a new instance of the VpnSDKConnectionTerminatedException class. Declaration public VpnSDKConnectionTerminatedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Enums.html": {
    "href": "api/VpnSDK.Public.Enums.html",
    "title": "Namespace VpnSDK.Public.Enums | Windows WLVPN SDK",
    "keywords": "Namespace VpnSDK.Public.Enums Enums AuthenticationStatus Enum AuthenticationStatus. Describes the status of the user authentication process. ConnectionStatus Enum ConnectionStatus. Describes the states of a VPN connection. NetworkConnectionType Enum NetworkConnectionType. Defines types of connections that can be used for a VPN tunnel. NetworkProtocolType Enum NetworkProtocolType. Defines Internet Protocol traffic types. OpenVpnCipherType Enum OpenVpnCipherType. Describes what security ciphers are available to use with OpenVPN. PositionInfoStatus Enum PositionInfoStatus. Describes the status of a position update operation. RefreshLocationListStatus Enum RefreshLocationListStatus. Describes the status of a server list refresh operation."
  },
  "api/VpnSDK.Public.Enums.OpenVpnCipherType.html": {
    "href": "api/VpnSDK.Public.Enums.OpenVpnCipherType.html",
    "title": "Enum OpenVpnCipherType | Windows WLVPN SDK",
    "keywords": "Enum OpenVpnCipherType Enum OpenVpnCipherType. Describes what security ciphers are available to use with OpenVPN. Namespace : VpnSDK.Public.Enums Assembly : VpnSDK.dll Syntax public enum OpenVpnCipherType Fields Name Description AES_128_CBC Advanced Encryption Standard / Rijndael encryption using 128-bit cipher block chaining. AES_256_CBC Advanced Encryption Standard / Rijndael encryption using 256-bit cipher block chaining."
  },
  "api/VpnSDK.Public.RasConfiguration.html": {
    "href": "api/VpnSDK.Public.RasConfiguration.html",
    "title": "Class RasConfiguration | Windows WLVPN SDK",
    "keywords": "Class RasConfiguration Class RasConfiguration. Describes the RAS configuration used for RAS-based ( IKEv2 / SSTP ) VPN connections. Inheritance Object RasConfiguration Namespace : VpnSDK.Public Assembly : VpnSDK.dll Syntax public class RasConfiguration Properties RasDeviceDescription Gets or sets the device description used by Windows. Declaration public string RasDeviceDescription { get; set; } Property Value Type Description String"
  },
  "api/VpnSDK.Public.Interfaces.ISDK.html": {
    "href": "api/VpnSDK.Public.Interfaces.ISDK.html",
    "title": "Interface ISDK | Windows WLVPN SDK",
    "keywords": "Interface ISDK Interface ISDK. Provides an interface for the SDK APIs. Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface ISDK Properties AllowLANTraffic Gets or sets a value indicating whether to allow LAN traffic even when AllowOnlyVPNConnectivity is enabled. Declaration bool AllowLANTraffic { get; set; } Property Value Type Description Boolean true if [allow lan traffic]; otherwise, false . AllowOnlyVPNConnectivity Gets or sets a value indicating whether to allow only VPN connectivity and block standard internet connections. Declaration bool AllowOnlyVPNConnectivity { get; set; } Property Value Type Description Boolean true if [allow only VPN connectivity]; otherwise, false . RegionsList Gets a value that represents the observable list of regions Declaration SourceList<ILocation> RegionsList { get; } Property Value Type Description DynamicData.SourceList < ILocation > the observable list WhenAccountInfoChanged Gets the observable responsible for when the user account information changed. Declaration IObservable<IUser> WhenAccountInfoChanged { get; } Property Value Type Description IObservable < IUser > An observable that fires when the user account information changed. WhenLocationListChanged Gets an observable for when the location list has changed. This must be subscribed to for RegionsList updates. Declaration IObservable<RefreshLocationListMessage> WhenLocationListChanged { get; } Property Value Type Description IObservable < RefreshLocationListMessage > Observable providing when the server location list has changed. WhenUserLocationChanged Gets an observable for when the user location has changed. Declaration IObservable<PositionInfoEventArgs> WhenUserLocationChanged { get; } Property Value Type Description IObservable < PositionInfoEventArgs > Observable providing when the user location has changed. Methods CancelConnectionProcess() Cancels any current connection process handled by the ISDK instance. Declaration void CancelConnectionProcess() Connect(ILocation, IConnectionConfiguration) Connects the user to the VPN location specified using the specified configuration Declaration IObservable<ConnectionStatus> Connect(ILocation location, IConnectionConfiguration connectionConfiguration) Parameters Type Name Description ILocation location The target location. IConnectionConfiguration connectionConfiguration The protocol configuration parameters for the connection. Returns Type Description IObservable < ConnectionStatus > An observable to allow the invoker to monitor the status of the connection. Disconnect() Disconnect the user from the active VPN connection. Declaration IObservable<ConnectionStatus> Disconnect() Returns Type Description IObservable < ConnectionStatus > An observable to allow the invoker to monitor the status of the disconnection process. GetAvailableVpnTypes() Gets the available VPN types. Declaration Dictionary<NetworkConnectionType, bool> GetAvailableVpnTypes() Returns Type Description Dictionary < NetworkConnectionType , Boolean > Dictionary<NetworkConnectionType, System.Boolean>. Login(String, String) Logins the specified username and provides an observable process. Declaration IObservable<AuthenticationStatus> Login(string username, string password) Parameters Type Name Description String username The username. String password The password. Returns Type Description IObservable < AuthenticationStatus > IObservable<AuthenticationStatus>. Logout() Logouts this instance and provides an observable process. Declaration IObservable<AuthenticationStatus> Logout() Returns Type Description IObservable < AuthenticationStatus > IObservable<AuthenticationStatus>."
  },
  "api/VpnSDK.Public.Enums.ConnectionStatus.html": {
    "href": "api/VpnSDK.Public.Enums.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | Windows WLVPN SDK",
    "keywords": "Enum ConnectionStatus Enum ConnectionStatus. Describes the states of a VPN connection. Namespace : VpnSDK.Public.Enums Assembly : VpnSDK.dll Syntax public enum ConnectionStatus Fields Name Description Cancelled Cancelled by user. Connected Connected successfully. Connecting Connecting to the server. Disconnected Disconnected. Disconnecting Disconnecting. Failed Failed during connection."
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKBaseException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKBaseException.html",
    "title": "Class VpnSDKBaseException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKBaseException Class VpnSDKBaseException. Used as a base class for all SDK exceptions. Inheritance Object Exception VpnSDKBaseException VpnSDKAPIException VpnSDKAuthenticationException VpnSDKConnectionAlreadyEstablishedException VpnSDKConnectionException VpnSDKConnectionTerminatedException VpnSDKCoreException VpnSDKEmptyAvailableVpnProtocolsException VpnSDKFetchLocationsException VpnSDKInvalidConfigurationException VpnSDKNotAuthorizedException VpnSDKNullLocationException VpnSDKOAuthException VpnSDKUnsupportedProtocolException VpnSDKVPNAuthenticationException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public abstract class VpnSDKBaseException : Exception, ISerializable, _Exception Constructors VpnSDKBaseException(String) Initializes a new instance of the VpnSDKBaseException class. Declaration protected VpnSDKBaseException(string message) Parameters Type Name Description String message The message that describes the error. VpnSDKBaseException(String, Exception) Initializes a new instance of the VpnSDKBaseException class. Declaration protected VpnSDKBaseException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties ErrorCode Gets the error code. Declaration public abstract int ErrorCode { get; } Property Value Type Description Int32 The error code. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception)"
  },
  "api/VpnSDK.Public.Interfaces.IBestAvailable.html": {
    "href": "api/VpnSDK.Public.Interfaces.IBestAvailable.html",
    "title": "Interface IBestAvailable | Windows WLVPN SDK",
    "keywords": "Interface IBestAvailable Interface IBestAvailable. Tagging interface that describes a special ILocation that always finds the 'best available' location for the user. Inherited Members ILocation.Id ILocation.CountryCode ILocation.CityCode ILocation.SearchName Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface IBestAvailable : ILocation See Also ILocation"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKConnectionAlreadyEstablishedException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKConnectionAlreadyEstablishedException.html",
    "title": "Class VpnSDKConnectionAlreadyEstablishedException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKConnectionAlreadyEstablishedException Exception VpnSDKConnectionAlreadyEstablishedException. Fires when a VPN connection request is called when a connection is already established. Inheritance Object Exception VpnSDKBaseException VpnSDKConnectionAlreadyEstablishedException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKConnectionAlreadyEstablishedException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKConnectionAlreadyEstablishedException(String) Initializes a new instance of the VpnSDKConnectionAlreadyEstablishedException class. Declaration public VpnSDKConnectionAlreadyEstablishedException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKConnectionAlreadyEstablishedException(String, Exception) Initializes a new instance of the VpnSDKConnectionAlreadyEstablishedException class. Declaration public VpnSDKConnectionAlreadyEstablishedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKCoreException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKCoreException.html",
    "title": "Class VpnSDKCoreException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKCoreException Exception VpnSDKCoreException. Fires when the SDK core construction has failed. Inheritance Object Exception VpnSDKBaseException VpnSDKCoreException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKCoreException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKCoreException(String) Initializes a new instance of the VpnSDKCoreException class. Declaration public VpnSDKCoreException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKCoreException(String, Exception) Initializes a new instance of the VpnSDKCoreException class. Declaration public VpnSDKCoreException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKVPNAuthenticationException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKVPNAuthenticationException.html",
    "title": "Class VpnSDKVPNAuthenticationException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKVPNAuthenticationException Exception VpnSDKVPNAuthenticationException. Fired when an authentication request fails due to API issues. Inheritance Object Exception VpnSDKBaseException VpnSDKVPNAuthenticationException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKVPNAuthenticationException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKVPNAuthenticationException(String) Initializes a new instance of the VpnSDKVPNAuthenticationException class. Declaration public VpnSDKVPNAuthenticationException(string message) Parameters Type Name Description String message The message. VpnSDKVPNAuthenticationException(String, Exception) Initializes a new instance of the VpnSDKVPNAuthenticationException class. Declaration public VpnSDKVPNAuthenticationException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKUnsupportedProtocolException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKUnsupportedProtocolException.html",
    "title": "Class VpnSDKUnsupportedProtocolException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKUnsupportedProtocolException Exception VpnSDKUnsupportedProtocolException. Fired when a connection request is using an invalid or unconfigured protocol. Inheritance Object Exception VpnSDKBaseException VpnSDKUnsupportedProtocolException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKUnsupportedProtocolException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKUnsupportedProtocolException(String) Initializes a new instance of the VpnSDKUnsupportedProtocolException class. Declaration public VpnSDKUnsupportedProtocolException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKUnsupportedProtocolException(String, Exception) Initializes a new instance of the VpnSDKUnsupportedProtocolException class. Declaration public VpnSDKUnsupportedProtocolException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKAuthenticationException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKAuthenticationException.html",
    "title": "Class VpnSDKAuthenticationException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKAuthenticationException Exception VpnSDKAuthenticationException. Fired when an authentication request fails due to invalid credentials or Bad Request. Inheritance Object Exception VpnSDKBaseException VpnSDKAuthenticationException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKAuthenticationException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKAuthenticationException(String) Initializes a new instance of the VpnSDKAuthenticationException class. Declaration public VpnSDKAuthenticationException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKAuthenticationException(String, Exception) Initializes a new instance of the VpnSDKAuthenticationException class. Declaration public VpnSDKAuthenticationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.SDKBuilder.html": {
    "href": "api/VpnSDK.Public.SDKBuilder.html",
    "title": "Class SDKBuilder | Windows WLVPN SDK",
    "keywords": "Class SDKBuilder Class SDKBuilder. Used to build an instance of an ISDK . Inheritance Object VpnSDK.Public.SDKBuilderBase < ISDK , SDKBuilder > SDKBuilder Namespace : VpnSDK.Public Assembly : VpnSDK.dll Syntax public class SDKBuilder : SDKBuilderBase<ISDK, SDKBuilder> Methods Create() Creates an ISDK based off the parameters chained before the call. Declaration public override ISDK Create() Returns Type Description ISDK An instance of ISDK . Overrides VpnSDK.Public.SDKBuilderBase<VpnSDK.Public.Interfaces.ISDK, VpnSDK.Public.SDKBuilder>.Create() Validate() Validates the configuration before creating the SDK instance. The validation done depends on the type of client. Declaration public override void Validate() Overrides VpnSDK.Public.SDKBuilderBase<VpnSDK.Public.Interfaces.ISDK, VpnSDK.Public.SDKBuilder>.Validate() Exceptions Type Condition VpnSDKInvalidConfigurationException Either the API Key, application name or authentication token were not set. VpnSDKEmptyAvailableVpnProtocolsException No VPN protocols were configured."
  },
  "api/VpnSDK.Public.Extensions.html": {
    "href": "api/VpnSDK.Public.Extensions.html",
    "title": "Namespace VpnSDK.Public.Extensions | Windows WLVPN SDK",
    "keywords": "Namespace VpnSDK.Public.Extensions Classes ExceptionExtensions ExceptionExtentions class. RegionLoadChecker Class RegionLoadChecker. Provides utilities for checking a locations load by averaging them all and providing a simple LoadLevel value. Enums LoadLevel Enum LoadLevel. Represents the current user load level of a region. The lower, the better."
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKInvalidConfigurationException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKInvalidConfigurationException.html",
    "title": "Class VpnSDKInvalidConfigurationException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKInvalidConfigurationException Exception VpnSDKInvalidConfigurationException. Fires when SDK configuration is invalid due to missing parameters or an unconfigured VPN protocol is requested. Inheritance Object Exception VpnSDKBaseException VpnSDKInvalidConfigurationException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKInvalidConfigurationException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKInvalidConfigurationException(String) Initializes a new instance of the VpnSDKInvalidConfigurationException class. Declaration public VpnSDKInvalidConfigurationException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKInvalidConfigurationException(String, Exception) Initializes a new instance of the VpnSDKInvalidConfigurationException class. Declaration public VpnSDKInvalidConfigurationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Helpers.VpnProtocolDiagnostics.html": {
    "href": "api/VpnSDK.Public.Helpers.VpnProtocolDiagnostics.html",
    "title": "Class VpnProtocolDiagnostics | Windows WLVPN SDK",
    "keywords": "Class VpnProtocolDiagnostics Class VpnProtocolDiagnostics. Provides utilities for diagnosing VPN protocol issues. Inheritance Object VpnProtocolDiagnostics Namespace : VpnSDK.Public.Helpers Assembly : VpnSDK.dll Syntax public class VpnProtocolDiagnostics Methods DiagnoseProtocolsAvailability(OpenVpnConfiguration, RasConfiguration, Dictionary<NetworkConnectionType, Boolean>) Diagnoses the protocols availability. Declaration public static void DiagnoseProtocolsAvailability(OpenVpnConfiguration openVpnConfiguration, RasConfiguration rasConfiguration, Dictionary<NetworkConnectionType, bool> availableProtocols) Parameters Type Name Description OpenVpnConfiguration openVpnConfiguration The Open VPN configuration. RasConfiguration rasConfiguration The RAS configuration. Dictionary < NetworkConnectionType , Boolean > availableProtocols The available protocols. Exceptions Type Condition VpnSDKEmptyAvailableVpnProtocolsException There are no VPN protocols available."
  },
  "api/VpnSDK.Public.OpenVpnConfiguration.html": {
    "href": "api/VpnSDK.Public.OpenVpnConfiguration.html",
    "title": "Class OpenVpnConfiguration | Windows WLVPN SDK",
    "keywords": "Class OpenVpnConfiguration Class OpenVpnConfiguration. Describes the OpenVPN application configuration for the application. Inheritance Object OpenVpnConfiguration Namespace : VpnSDK.Public Assembly : VpnSDK.dll Syntax public class OpenVpnConfiguration Properties OpenVpnCertificateFileName Gets or sets the name of the OpenVPN certificate file. Declaration public string OpenVpnCertificateFileName { get; set; } Property Value Type Description String The name of the OpenVPN certificate file. OpenVpnConfigDirectory Gets or sets the OpenVPN configuration directory. Declaration public string OpenVpnConfigDirectory { get; set; } Property Value Type Description String The OpenVPN configuration directory. OpenVpnConfigFileName Gets or sets the name of the OpenVPN configuration file. This should end in .ovpn. Declaration public string OpenVpnConfigFileName { get; set; } Property Value Type Description String The name of the OpenVPN configuration file. OpenVpnDirectory Gets or sets the OpenVPN directory. Declaration public string OpenVpnDirectory { get; set; } Property Value Type Description String The OpenVPN directory. OpenVpnExecutableFileName Gets or sets the file name of the OpenVPN executable. Declaration public string OpenVpnExecutableFileName { get; set; } Property Value Type Description String OpenVpnLogFileName Gets or sets the log file name for OpenVPN. Declaration public string OpenVpnLogFileName { get; set; } Property Value Type Description String TapDeviceDescription Gets or sets the TAP device description. This refers to the network adapter that OpenVPN uses. Declaration public string TapDeviceDescription { get; set; } Property Value Type Description String The TAP device description. TapDeviceName Gets or sets the name of the TAP device. This is defined in the driver .inf file. Declaration public string TapDeviceName { get; set; } Property Value Type Description String The TAP device name."
  },
  "api/VpnSDK.Public.Interfaces.IConnectionConfiguration.html": {
    "href": "api/VpnSDK.Public.Interfaces.IConnectionConfiguration.html",
    "title": "Interface IConnectionConfiguration | Windows WLVPN SDK",
    "keywords": "Interface IConnectionConfiguration Interface IConnectionConfiguration. Provides an interface for a connection configuration. Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface IConnectionConfiguration Properties ConnectionType Gets the connection type to use. ( OpenVPN, IKEv2, etc. ) Declaration NetworkConnectionType ConnectionType { get; } Property Value Type Description NetworkConnectionType"
  },
  "api/VpnSDK.Public.Interfaces.IRegion.html": {
    "href": "api/VpnSDK.Public.Interfaces.IRegion.html",
    "title": "Interface IRegion | Windows WLVPN SDK",
    "keywords": "Interface IRegion Interface IRegion. Describes a region as an ILocation . Inherited Members ILocation.Id ILocation.CountryCode ILocation.CityCode ILocation.SearchName Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface IRegion : ILocation Properties City Gets the city of the location to connect to. This field may be empty on some location objects. Declaration string City { get; } Property Value Type Description String Country Gets the country of the location to connect to. Declaration string Country { get; } Property Value Type Description String GeoCoordinate Gets the geo coordinate that presents the region on a map. Declaration GeoCoordinate GeoCoordinate { get; } Property Value Type Description GeoCoordinate The current IRegion 's geo coordinate. Load Gets the user load of the region. Higher values mean that the server is nearing capacity. Declaration ushort? Load { get; } Property Value Type Description Nullable < UInt16 > The current user load between 0% to 100% as a flattened value. See Also ILocation"
  },
  "api/VpnSDK.Public.Enums.NetworkProtocolType.html": {
    "href": "api/VpnSDK.Public.Enums.NetworkProtocolType.html",
    "title": "Enum NetworkProtocolType | Windows WLVPN SDK",
    "keywords": "Enum NetworkProtocolType Enum NetworkProtocolType. Defines Internet Protocol traffic types. Namespace : VpnSDK.Public.Enums Assembly : VpnSDK.dll Syntax public enum NetworkProtocolType Fields Name Description TCP Transmission Control Protocol UDP User Datagram Protocol"
  },
  "api/VpnSDK.Public.Interfaces.html": {
    "href": "api/VpnSDK.Public.Interfaces.html",
    "title": "Namespace VpnSDK.Public.Interfaces | Windows WLVPN SDK",
    "keywords": "Namespace VpnSDK.Public.Interfaces Interfaces IBestAvailable Interface IBestAvailable. Tagging interface that describes a special ILocation that always finds the 'best available' location for the user. IConnectionConfiguration Interface IConnectionConfiguration. Provides an interface for a connection configuration. ILocation Interface ILocation. Describes an interface for a generic location. IOpenVpnConnectionConfiguration Interface IOpenVpnConnectionConfiguration. Provides an interface that contains OpenVPN specific options. IRasConnectionConfiguration Interface IRasConnectionConfiguration. Tagging interface for RAS-based IConnectionConfiguration . IRegion Interface IRegion. Describes a region as an ILocation . ISDK Interface ISDK. Provides an interface for the SDK APIs. IServer Interface IServer. Describes a single server as an ILocation . IUser Interface IUser. Provides an interface for API users/customers."
  },
  "api/VpnSDK.Public.Messages.RefreshLocationListMessage.html": {
    "href": "api/VpnSDK.Public.Messages.RefreshLocationListMessage.html",
    "title": "Class RefreshLocationListMessage | Windows WLVPN SDK",
    "keywords": "Class RefreshLocationListMessage Class RefreshLocationListMessage. Describes the messages returned during Location List refresh operation. Inheritance Object RefreshLocationListMessage Namespace : VpnSDK.Public.Messages Assembly : VpnSDK.dll Syntax public class RefreshLocationListMessage Constructors RefreshLocationListMessage(RefreshLocationListStatus) Initializes a new instance of the RefreshLocationListMessage class. Declaration public RefreshLocationListMessage(RefreshLocationListStatus status) Parameters Type Name Description RefreshLocationListStatus status Refresh process status. RefreshLocationListMessage(RefreshLocationListStatus, Exception) Initializes a new instance of the RefreshLocationListMessage class. Declaration public RefreshLocationListMessage(RefreshLocationListStatus status, Exception exception = null) Parameters Type Name Description RefreshLocationListStatus status Refresh process status. Exception exception Refresh process exception Properties Exception Gets refresh process exception. Declaration public Exception Exception { get; } Property Value Type Description Exception Status Gets refresh process status. Declaration public RefreshLocationListStatus Status { get; } Property Value Type Description RefreshLocationListStatus"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKNotAuthorizedException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKNotAuthorizedException.html",
    "title": "Class VpnSDKNotAuthorizedException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKNotAuthorizedException Exception VpnSDKNotAuthorizedException. Fired when API requests are fired before authenticating a user. Inheritance Object Exception VpnSDKBaseException VpnSDKNotAuthorizedException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKNotAuthorizedException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKNotAuthorizedException(String) Initializes a new instance of the VpnSDKNotAuthorizedException class. Declaration public VpnSDKNotAuthorizedException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKNotAuthorizedException(String, Exception) Initializes a new instance of the VpnSDKNotAuthorizedException class. Declaration public VpnSDKNotAuthorizedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKConnectionException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKConnectionException.html",
    "title": "Class VpnSDKConnectionException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKConnectionException Exception VpnSDKConnectionException. Fires when a VPN connection has failed. Inheritance Object Exception VpnSDKBaseException VpnSDKConnectionException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKConnectionException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKConnectionException(String) Initializes a new instance of the VpnSDKConnectionException class. Declaration public VpnSDKConnectionException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKConnectionException(String, Exception) Initializes a new instance of the VpnSDKConnectionException class. Declaration public VpnSDKConnectionException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.OpenVpnConnectionConfigurationBuilder.html": {
    "href": "api/VpnSDK.Public.OpenVpnConnectionConfigurationBuilder.html",
    "title": "Class OpenVpnConnectionConfigurationBuilder | Windows WLVPN SDK",
    "keywords": "Class OpenVpnConnectionConfigurationBuilder Class OpenVpnConnectionConfigurationBuilder. Builder for an OpenVPN IConnectionConfiguration object. Inheritance Object OpenVpnConnectionConfigurationBuilder Namespace : VpnSDK.Public Assembly : VpnSDK.dll Syntax public class OpenVpnConnectionConfigurationBuilder Methods Build() Builds an IConnectionConfiguration based off this instance. Declaration public IConnectionConfiguration Build() Returns Type Description IConnectionConfiguration IConnectionConfiguration. Exceptions Type Condition InvalidOperationException Cipher must be set to AES-128 when scramble is enabled. SetCipher(OpenVpnCipherType) Sets the OpenVPN cipher. Declaration public OpenVpnConnectionConfigurationBuilder SetCipher(OpenVpnCipherType cipherType) Parameters Type Name Description OpenVpnCipherType cipherType Type of the cipher. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetNetworkProtocol(NetworkProtocolType) Sets the network protocol. Declaration public OpenVpnConnectionConfigurationBuilder SetNetworkProtocol(NetworkProtocolType protocol) Parameters Type Name Description NetworkProtocolType protocol The protocol. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetScramble(Boolean) Sets whether to use XOR-based traffic scrambling or not. Declaration public OpenVpnConnectionConfigurationBuilder SetScramble(bool scramble) Parameters Type Name Description Boolean scramble if set to true traffic scrambling is enabled. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder."
  },
  "api/VpnSDK.Public.RasConnectionConfigurationBuilder.html": {
    "href": "api/VpnSDK.Public.RasConnectionConfigurationBuilder.html",
    "title": "Class RasConnectionConfigurationBuilder | Windows WLVPN SDK",
    "keywords": "Class RasConnectionConfigurationBuilder Class RasConnectionConfigurationBuilder. Builder for a RAS-based IConnectionConfiguration object. Inheritance Object RasConnectionConfigurationBuilder Namespace : VpnSDK.Public Assembly : VpnSDK.dll Syntax public class RasConnectionConfigurationBuilder Methods Build() Builds this instance. Declaration public IConnectionConfiguration Build() Returns Type Description IConnectionConfiguration IConnectionConfiguration. SetConnectionType(NetworkConnectionType) Sets the type of the connection. Restricted to IKEv2 and SSTP . Declaration public RasConnectionConfigurationBuilder SetConnectionType(NetworkConnectionType connectionType) Parameters Type Name Description NetworkConnectionType connectionType Type of the connection. Returns Type Description RasConnectionConfigurationBuilder RasConnectionConfigurationBuilder."
  },
  "api/VpnSDK.Public.Exceptions.html": {
    "href": "api/VpnSDK.Public.Exceptions.html",
    "title": "Namespace VpnSDK.Public.Exceptions | Windows WLVPN SDK",
    "keywords": "Namespace VpnSDK.Public.Exceptions Classes VpnSDKAPIException Exception VpnSDKOAuthException. Fired when an authentication request fails due to API issues. VpnSDKAuthenticationException Exception VpnSDKAuthenticationException. Fired when an authentication request fails due to invalid credentials or Bad Request. VpnSDKBaseException Class VpnSDKBaseException. Used as a base class for all SDK exceptions. VpnSDKConnectionAlreadyEstablishedException Exception VpnSDKConnectionAlreadyEstablishedException. Fires when a VPN connection request is called when a connection is already established. VpnSDKConnectionException Exception VpnSDKConnectionException. Fires when a VPN connection has failed. VpnSDKConnectionTerminatedException Exception VpnSDKConnectionTerminatedException. Fires when a VPN connection is terminated by an external source. VpnSDKCoreException Exception VpnSDKCoreException. Fires when the SDK core construction has failed. VpnSDKEmptyAvailableVpnProtocolsException Exception VpnSDKEmptyAvailableVpnProtocolsException. Fires when SDK construction has detected that no VPN protocols are available on the machine due to OS configuration issues or misconfiguration of the SDK. VpnSDKFetchLocationsException Exception VpnSDKFetchLocationsException. Fires when location fetching has failed. VpnSDKInvalidConfigurationException Exception VpnSDKInvalidConfigurationException. Fires when SDK configuration is invalid due to missing parameters or an unconfigured VPN protocol is requested. VpnSDKNotAuthorizedException Exception VpnSDKNotAuthorizedException. Fired when API requests are fired before authenticating a user. VpnSDKNullLocationException Exception VpnSDKNullLocationException. Fires when a null location is provided to an SDK method. VpnSDKOAuthException Exception VpnSDKOAuthException. Fired when SDK is unable to refresh the access token. VpnSDKUnsupportedProtocolException Exception VpnSDKUnsupportedProtocolException. Fired when a connection request is using an invalid or unconfigured protocol. VpnSDKVPNAuthenticationException Exception VpnSDKVPNAuthenticationException. Fired when an authentication request fails due to API issues."
  },
  "api/VpnSDK.Public.Enums.AuthenticationStatus.html": {
    "href": "api/VpnSDK.Public.Enums.AuthenticationStatus.html",
    "title": "Enum AuthenticationStatus | Windows WLVPN SDK",
    "keywords": "Enum AuthenticationStatus Enum AuthenticationStatus. Describes the status of the user authentication process. Namespace : VpnSDK.Public.Enums Assembly : VpnSDK.dll Syntax public enum AuthenticationStatus Fields Name Description Authenticated Authentication has successfully completed and credentials are valid. Authenticating Authenticating the credentials against the WLVPN API. NotAuthenticated The WLVPN API was not reachable or the credentials provided were invalid."
  },
  "api/VpnSDK.Public.Enums.RefreshLocationListStatus.html": {
    "href": "api/VpnSDK.Public.Enums.RefreshLocationListStatus.html",
    "title": "Enum RefreshLocationListStatus | Windows WLVPN SDK",
    "keywords": "Enum RefreshLocationListStatus Enum RefreshLocationListStatus. Describes the status of a server list refresh operation. Namespace : VpnSDK.Public.Enums Assembly : VpnSDK.dll Syntax public enum RefreshLocationListStatus Fields Name Description Error The list refresh failed. Refreshed The list refresh is complete. Refreshing The list is being refreshed."
  },
  "api/VpnSDK.Public.Interfaces.IUser.html": {
    "href": "api/VpnSDK.Public.Interfaces.IUser.html",
    "title": "Interface IUser | Windows WLVPN SDK",
    "keywords": "Interface IUser Interface IUser. Provides an interface for API users/customers. Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface IUser Properties AccountType Gets the type of the account. Declaration string AccountType { get; } Property Value Type Description String The type of the account. EmailAddress Gets the email address. Declaration string EmailAddress { get; } Property Value Type Description String The email address. VpnPassword Gets the VPN server password. Declaration string VpnPassword { get; } Property Value Type Description String The VPN password. VpnUsername Gets the VPN server username. Declaration string VpnUsername { get; } Property Value Type Description String The VPN username."
  },
  "api/VpnSDK.Public.Enums.PositionInfoStatus.html": {
    "href": "api/VpnSDK.Public.Enums.PositionInfoStatus.html",
    "title": "Enum PositionInfoStatus | Windows WLVPN SDK",
    "keywords": "Enum PositionInfoStatus Enum PositionInfoStatus. Describes the status of a position update operation. Namespace : VpnSDK.Public.Enums Assembly : VpnSDK.dll Syntax public enum PositionInfoStatus Fields Name Description Updated The current position info has been updated. Updating The current position info is updating."
  },
  "api/VpnSDK.Public.PositionInfoEventArgs.html": {
    "href": "api/VpnSDK.Public.PositionInfoEventArgs.html",
    "title": "Class PositionInfoEventArgs | Windows WLVPN SDK",
    "keywords": "Class PositionInfoEventArgs Class PositionInfoEventArgs. Provides information about the users current position info. Inheritance Object EventArgs PositionInfoEventArgs Inherited Members EventArgs.Empty Namespace : VpnSDK.Public Assembly : VpnSDK.dll Syntax public class PositionInfoEventArgs : EventArgs Properties City Gets the name of the current city. Declaration public string City { get; } Property Value Type Description String The city. Country Gets the name of the current country. Declaration public string Country { get; } Property Value Type Description String The country. CountryCode Gets the ISO Alpha-2 country code for the current Country . Declaration public string CountryCode { get; } Property Value Type Description String The ISO Alpha-2 country code. IPAddress Gets the current IP address. Declaration public IPAddress IPAddress { get; } Property Value Type Description IPAddress The current IP address. Latitude Gets the latitude. Declaration public decimal Latitude { get; } Property Value Type Description Decimal The latitude. Longitude Gets the longitude. Declaration public decimal Longitude { get; } Property Value Type Description Decimal The longitude. Status Gets the status of whether the position is updating or updated. Declaration public PositionInfoStatus Status { get; } Property Value Type Description PositionInfoStatus The status of the PositionInfo updating operation. See Also EventArgs"
  },
  "api/VpnSDK.Public.Interfaces.IOpenVpnConnectionConfiguration.html": {
    "href": "api/VpnSDK.Public.Interfaces.IOpenVpnConnectionConfiguration.html",
    "title": "Interface IOpenVpnConnectionConfiguration | Windows WLVPN SDK",
    "keywords": "Interface IOpenVpnConnectionConfiguration Interface IOpenVpnConnectionConfiguration. Provides an interface that contains OpenVPN specific options. Inherited Members IConnectionConfiguration.ConnectionType Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface IOpenVpnConnectionConfiguration : IConnectionConfiguration Properties Cipher Gets or sets the cypher type to use Declaration OpenVpnCipherType Cipher { get; set; } Property Value Type Description OpenVpnCipherType ProtocolType Gets or sets the protocol type to use Declaration NetworkProtocolType ProtocolType { get; set; } Property Value Type Description NetworkProtocolType Scramble Gets or sets a value indicating whether scramble is enabled or not Declaration bool Scramble { get; set; } Property Value Type Description Boolean See Also IConnectionConfiguration"
  },
  "api/VpnSDK.Public.Enums.NetworkConnectionType.html": {
    "href": "api/VpnSDK.Public.Enums.NetworkConnectionType.html",
    "title": "Enum NetworkConnectionType | Windows WLVPN SDK",
    "keywords": "Enum NetworkConnectionType Enum NetworkConnectionType. Defines types of connections that can be used for a VPN tunnel. Namespace : VpnSDK.Public.Enums Assembly : VpnSDK.dll Syntax public enum NetworkConnectionType Fields Name Description IKEv2 Internet Key Exchange Version 2 (IPSec) L2TP Layer 2 Tunneling Protocol (IPSec) OpenVPN OpenVPN PPTP Point-to-Point Tunneling Protocol SSTP Secure Socket Tunneling Protocol"
  },
  "api/VpnSDK.Public.Helpers.html": {
    "href": "api/VpnSDK.Public.Helpers.html",
    "title": "Namespace VpnSDK.Public.Helpers | Windows WLVPN SDK",
    "keywords": "Namespace VpnSDK.Public.Helpers Classes VpnProtocolDiagnostics Class VpnProtocolDiagnostics. Provides utilities for diagnosing VPN protocol issues."
  },
  "api/VpnSDK.Public.Extensions.LoadLevel.html": {
    "href": "api/VpnSDK.Public.Extensions.LoadLevel.html",
    "title": "Enum LoadLevel | Windows WLVPN SDK",
    "keywords": "Enum LoadLevel Enum LoadLevel. Represents the current user load level of a region. The lower, the better. Namespace : VpnSDK.Public.Extensions Assembly : VpnSDK.dll Syntax public enum LoadLevel Fields Name Description High High user load. Invalid Invalid load level. Low Low user load. Medium Normal user load."
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKFetchLocationsException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKFetchLocationsException.html",
    "title": "Class VpnSDKFetchLocationsException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKFetchLocationsException Exception VpnSDKFetchLocationsException. Fires when location fetching has failed. Inheritance Object Exception VpnSDKBaseException VpnSDKFetchLocationsException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKFetchLocationsException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKFetchLocationsException(String) Initializes a new instance of the VpnSDKFetchLocationsException class. Declaration public VpnSDKFetchLocationsException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKFetchLocationsException(String, Exception) Initializes a new instance of the VpnSDKFetchLocationsException class. Declaration public VpnSDKFetchLocationsException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Extensions.RegionLoadChecker.html": {
    "href": "api/VpnSDK.Public.Extensions.RegionLoadChecker.html",
    "title": "Class RegionLoadChecker | Windows WLVPN SDK",
    "keywords": "Class RegionLoadChecker Class RegionLoadChecker. Provides utilities for checking a locations load by averaging them all and providing a simple LoadLevel value. Inheritance Object RegionLoadChecker Namespace : VpnSDK.Public.Extensions Assembly : VpnSDK.dll Syntax public static class RegionLoadChecker Methods GetRegionLoadLevel(Nullable<UInt16>) Get LoadLevel from a Region's load level. Declaration public static LoadLevel GetRegionLoadLevel(this ushort? value) Parameters Type Name Description Nullable < UInt16 > value The number value representing the load level. Returns Type Description LoadLevel The appropriate LoadLevel associated with the value."
  },
  "index.html": {
    "href": "index.html",
    "title": "WLVPN VpnSDK .NET Documentation | Windows WLVPN SDK",
    "keywords": "WLVPN VpnSDK .NET Documentation Introduction VpnSDK provides an implementation of the WLVPN service flow (both API and VPN connectivity) through an abstracted reactive interface. VpnSDK is built for .NET Framework 4.6 and targets Windows 7, Windows 8 and Windows 10. Earlier versions as well as Server and ARM editions are not supported. To get started, go to the quick-start guide that shows you how to implement VpnSDK in a console application. WLVPN Confidential The content of this document is highly confidential and should be handled accordingly. The contents of this document cannot be duplicated, copied, reprinted, transferred, distributed, or loaned, in whole or in part, without the prior approval of WLVPN. This document contains confidential and proprietary information of WLVPN, and is protected under confidentiality agreements as well as the intellectual property laws of the United States and of other countries. No part of this document may be released, distributed, transmitted, or reproduced in any form, including by any electronic or mechanical means and by including within information storage and retrieval systems, without written permission from WLVPN."
  },
  "api/VpnSDK.Public.Messages.html": {
    "href": "api/VpnSDK.Public.Messages.html",
    "title": "Namespace VpnSDK.Public.Messages | Windows WLVPN SDK",
    "keywords": "Namespace VpnSDK.Public.Messages Classes RefreshLocationListMessage Class RefreshLocationListMessage. Describes the messages returned during Location List refresh operation."
  },
  "api/VpnSDK.Public.Interfaces.IRasConnectionConfiguration.html": {
    "href": "api/VpnSDK.Public.Interfaces.IRasConnectionConfiguration.html",
    "title": "Interface IRasConnectionConfiguration | Windows WLVPN SDK",
    "keywords": "Interface IRasConnectionConfiguration Interface IRasConnectionConfiguration. Tagging interface for RAS-based IConnectionConfiguration . Inherited Members IConnectionConfiguration.ConnectionType Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface IRasConnectionConfiguration : IConnectionConfiguration See Also IConnectionConfiguration"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | Windows WLVPN SDK",
    "keywords": "API Documentation On the left-hand side you will find in-depth information on all the classes, objects and enums provided with VpnSDK .NET."
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKAPIException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKAPIException.html",
    "title": "Class VpnSDKAPIException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKAPIException Exception VpnSDKOAuthException. Fired when an authentication request fails due to API issues. Inheritance Object Exception VpnSDKBaseException VpnSDKAPIException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKAPIException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKAPIException(String) Initializes a new instance of the VpnSDKAPIException class. Declaration public VpnSDKAPIException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKAPIException(String, Exception) Initializes a new instance of the VpnSDKAPIException class. Declaration public VpnSDKAPIException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKNullLocationException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKNullLocationException.html",
    "title": "Class VpnSDKNullLocationException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKNullLocationException Exception VpnSDKNullLocationException. Fires when a null location is provided to an SDK method. Inheritance Object Exception VpnSDKBaseException VpnSDKNullLocationException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKNullLocationException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKNullLocationException(String) Initializes a new instance of the VpnSDKNullLocationException class. Declaration public VpnSDKNullLocationException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKNullLocationException(String, Exception) Initializes a new instance of the VpnSDKNullLocationException class. Declaration public VpnSDKNullLocationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  },
  "api/VpnSDK.Public.Interfaces.ILocation.html": {
    "href": "api/VpnSDK.Public.Interfaces.ILocation.html",
    "title": "Interface ILocation | Windows WLVPN SDK",
    "keywords": "Interface ILocation Interface ILocation. Describes an interface for a generic location. Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface ILocation Properties CityCode Gets the city code. Declaration string CityCode { get; } Property Value Type Description String The city code. CountryCode Gets the country code. Declaration string CountryCode { get; } Property Value Type Description String The country code. Id Gets the identifier. Declaration string Id { get; } Property Value Type Description String The identifier. SearchName Gets the string used for searching. Declaration string SearchName { get; } Property Value Type Description String The name to be used in searches."
  },
  "articles/branding.html": {
    "href": "articles/branding.html",
    "title": "Branding - How To Make ConsumerVPN Yours | Windows WLVPN SDK",
    "keywords": "Branding - How To Make ConsumerVPN Yours Provided to you is a copy of the example ConsumerVPN client, a base application that can be simply modified to be used as your customer-facing application. Designed to be simple to make unique, for most WLVPN partners, you will find yourself using it as your launching point as you use the features WLVPN provides. What you need You will need to become a registered WLVPN reseller to run the application. If you have not done so already, please visit https://wlvpn.com/#contact to get started. To create your own application from this template, you will need a copy of Visual Studio. This can be obtained from here: https://www.visualstudio.com/vs/ Once Visual Studio 2017 has been installed, you will need to clone or download the repository for the ConsumerVPN application. You can either clone using git at https://github.com/wlvpn/ConsumerVPN-Windows or download the ZIP from our partner portal. Once downloaded an extracted, open the VpnSDK.WLVpn.sln file in the extracted folder. The application is a Microsoft .NET C# WPF application. It follows the normal MVVM patterns associated with a WPF application. This document does not detail the code in the application but how to change the look of the application generated from the code. If you install Visual Studio 2017, which is what we are using currently, you will get .NET 4.6.1 which is the .NET prerequisite for the application. We use the WiX toolset for building installers. You will also need to download and install the WiX Toolset build tools and WiX Toolset Visual Studio Extensions that are compatible with your environment from this link: http://wixtoolset.org/releases/ The Wix installation will require you to enable .net 3.5 on your machine. If WiX does not automatically do this for you, perform the following instructions: Press “ Windows Logo ” + “ R ” keys on the keyboard. Type “ appwiz.cpl ” in the “ Run ” command box and press “ ENTER ” on the keyboard or click Run . In the “ *Programs and Features ” window, click on the link “ *Turn Windows features on or off **”. Check if the “ *.NET Framework 3.5 (includes .NET 2.0 and 3.0) *” option is available in it. If yes, then enable it and then click on “ *OK *”. Follow the on-screen instructions to complete the installation and restart the computer, if prompted. If you run in to any errors, the following link will provide information from Microsoft on how to solve any potential issues. https://answers.microsoft.com/en-us/insider/forum/insider_wintp-insider_install/how-to-instal-net-framework-35-on-windows-10/450b3ba6-4d19-45ae-840e-78519f36d7a4?auth=1 Navigating the project Solution Structure The application is divided in to the following solution structure. Folder / Namespace Explanation / Usage Behaviors WPF behavior utilities Common Common View utilities Converters Data converters for UI elements Events Application-wide events Extensions Custom utility class extensions Helpers Utility classes for dealing with all kinds of data Resources All visual resources are stored here. You will most likely be working in here. There is a branding subfolder in this which contains all the files required to be modified to make the application visually yours. ViewModels View models (for standard MVVM development) for all views in the application. Views All the views the application uses. Things to change when branding Application Settings In the VpnSDK.WLVPN application properties (found by right clicking on the project in the solution explorer and then going to settings on the left-hand side bar) you will find the following settings. API_KEY AUTHORIZATION_TOKEN APPLICATION_NAME These keys will need to be updated to match the data provided to you by WLVPN SDK to ensure you're able to authorize to the backend and use all functionality. Application name and namespace Under the Application section of the project properties, you will want to change the field WLConcepts to something along the lines of your application brand. For example, if you were called ConsumerVPN, it would be suggested to call it ConsumerVPN. As well as this, you should changed the Default Namespace to CompanyName.ApplicationName . Visual Studio will assist you in updating all the namespaces in the project files automatically. Visual Settings Each of the files in the Branding folder within Resources may be changed to have your visualization. Each file will be discussed in this section. Branding.xaml The Branding.xaml file is a WPF resource file that defines brushes, colors, images and strings used in various places within the application. Resources are defined in this file using the normal WPF Resource definition forms. If you wish to change a color or a brush, this is the file where you do it. The keys and values defined in the file are shown below and are generally self-explanatory. Refer to the key names to get a better understanding of what the value represents. <!-- Names and URLs --> <system:String x:Key=\"BRAND_NAME\">Consumer VPN</system:String> <system:String x:Key=\"BRAND_LOGFILE_NAME\">ConsumerVPN.log</system:String> <system:String x:Key=\"BRAND_MAIN_URL\">https://wlvpn.com/#contact</system:String> <system:String x:Key=\"BRAND_REGISTER_URL\">https://wlvpn.com/#contact</system:String> <system:String x:Key=\"BRAND_FORGOT_PASSWORD_URL\">https://wlvpn.com/#contact</system:String> <system:String x:Key=\"BRAND_SPARKLE_URL\">https://example/sparkle.xml</system:String> <!-- Logos, images and licenses --> <BitmapImage x:Key=\"BRAND_LOGO\" UriSource=\"pack://application:,,,/WLVpn;component/Resources/Branding/Assets/logo.png\" /> <BitmapImage x:Key=\"BRAND_BANNER\" UriSource=\"pack://application:,,,/WLVpn;component/Resources/Branding/Assets/imageBanner.png\" /> <BitmapImage x:Key=\"BRAND_MAP\" UriSource=\"pack://application:,,,/WLVpn;component/Resources/Branding/Assets/dotmap.png\" /> <ImageSource x:Key=\"BRANDING_UNKNOWN_COUNTRY_LOGO\">pack://application:,,,/WLVpn;component/Resources/Branding/Assets/logo.png</ImageSource> <system:String x:Key=\"BRAND_LICENSE\">pack://application:,,,/WLVpn;component/Resources/Branding/Assets/licenses.rtf</system:String> <system:String x:Key=\"BRAND_ICON\">pack://application:,,,/WLVpn;component/Resources/Branding/Assets/brandIcon.ico</system:String> <!-- Branding colors and brushes --> <!-- Multiview colors and brushes --> <SolidColorBrush x:Key=\"BRAND_TITLE_TEXT_FOREGROUND\" Color=\"White\" /> <SolidColorBrush x:Key=\"BRAND_NORMAL_TEXT_FOREGROUND\" Color=\"White\" /> <SolidColorBrush x:Key=\"BRAND_CONTRAST_FOREGROUND\" Color=\"White\" /> <SolidColorBrush x:Key=\"BRAND_ACTION_PANEL_BRUSH\" Color=\"#545454\" /> <!-- Login view brushes --> <SolidColorBrush x:Key=\"BRAND_LOGIN_LOGO_BACKGROUND\" Color=\"#202020\" /> <SolidColorBrush x:Key=\"BRAND_LOGIN_PANEL_BACKGROUND\" Color=\"#545454\" /> <SolidColorBrush x:Key=\"BRAND_LOGIN_ICON_ACCENT\" Color=\"White\" /> <SolidColorBrush x:Key=\"BRAND_LOGIN_ERROR_ACCENT\" Color=\"#E10000\" /> <SolidColorBrush x:Key=\"BRAND_LOGIN_ACCENT\" Color=\"White\" /> <!-- Location view brushes --> <SolidColorBrush x:Key=\"BRAND_LOCATION_LIST_BACKGROUND\" Color=\"#545454\" /> <SolidColorBrush x:Key=\"BRAND_LOCATION_SERVERS_LIST_BACKGROUND\" Color=\"#2a2a2a\" /> <SolidColorBrush x:Key=\"BRAND_LOCATION_LIST_HEADER_BORDER\" Color=\"Black\" /> <SolidColorBrush x:Key=\"BRAND_SEARCH_BACKGROUND\" Color=\"#717171\" /> <SolidColorBrush x:Key=\"BRAND_SEARCH_FOREGROUND\" Color=\"White\" /> <!-- Main view brushes --> <SolidColorBrush x:Key=\"BRAND_CONNECTIVITY_PANEL_BACKGROUND\" Color=\"#545454\" /> <SolidColorBrush x:Key=\"BRAND_CONNECT_BUTTON_FOREGROUND\" Color=\"White\" /> <SolidColorBrush x:Key=\"BRAND_CONNECT_BUTTON_BACKGROUND_NORMAL\" Color=\"#5FB006\" /> <SolidColorBrush x:Key=\"BRAND_CONNECT_BUTTON_BACKGROUND_DISABLED\" Color=\"#929292\" /> <SolidColorBrush x:Key=\"BRAND_CONNECT_BUTTON_BACKGROUND_MOUSEOVER\" Color=\"#417C0A\" /> <!-- Settings view brushes --> <SolidColorBrush x:Key=\"BRAND_SETTINGS_TAB_FOREGROUND\" Color=\"White\" /> <SolidColorBrush x:Key=\"BRAND_SETTINGS_TAB_BOTTOM_BORDER_HIGHLIGHT\" Color=\"#D8D8D9\" /> <SolidColorBrush x:Key=\"BRAND_SETTINGS_TAB_BOTTOM_BORDER\" Color=\"#0c0c0c\" /> <SolidColorBrush x:Key=\"BRAND_SETTINGS_PANEL_BACKGROUND\" Color=\"#202020\" /> <SolidColorBrush x:Key=\"BRAND_SETTINGS_CONTROLS_COLOR\" Color=\"White\" /> <!-- Miscs --> <Color x:Key=\"BRAND_ISBUSY_BACKGROUND\">Black</Color> <SolidColorBrush x:Key=\"BRAND_GRID_TEXT_FOREGROUND\" Color=\"White\" /> <SolidColorBrush x:Key=\"BRAND_COMBOBOX_BACKGROUND\" Color=\"#2a2a2a\" /> <SolidColorBrush x:Key=\"BRAND_DIALOG_BACKGROUND\" Color=\"#545454\" /> <Color x:Key=\"BRAND_TAB_DISABLED_BORDER_COLOR\">#AAAAAA</Color> <system:Boolean x:Key=\"BRAND_USES_EMAIL\">False</system:Boolean> <!-- Context Menu colors --> <Color x:Key=\"BRAND_MENU_TEXT_HIGHLIGHT\">Black</Color> <Color x:Key=\"BRAND_CONTEXT_MENU_BACKGROUND_COLOR\">Black</Color> <SolidColorBrush x:Key=\"BRAND_CONTEXT_MENU_FOREGROUND_BRUSH\" Color=\"White\" /> <SolidColorBrush x:Key=\"ContextMenuBackgroundBrush\" Color=\"{StaticResource BRAND_CONTEXT_MENU_BACKGROUND_COLOR}\" /> <SolidColorBrush x:Key=\"SubMenuBackgroundBrush\" Color=\"{StaticResource BRAND_CONTEXT_MENU_BACKGROUND_COLOR}\" /> <SolidColorBrush x:Key=\"MenuItemBackgroundBrush\" Color=\"{StaticResource BRAND_CONTEXT_MENU_BACKGROUND_COLOR}\" /> There are quite a lot of colors to change but don't get too scared. Nearly every color can be modified to your hearts content to ensure your application color scheme fits with the palette you wish to use for your brand. Strings.resx Shown below are the strings we currently use in the application. If you wish a different string to be used, change the text value in the Strings.resx file. Note, the Strings.resx file defines all the strings that are user facing. KEY VALUE AUTHENTICATING Authenticating BEST_AVAILABLE Best CANCEL Cancel CHANGE_LOCATION_BUTTON Change CIPHER_LEVEL Cipher CITY City CLOSE CLOSE CLOSE_DIALOG_QUIT_BUTTON Quit CONNECTED_ENCRYPTION Cipher: CONNECTED_PUBLIC_IP_HEADER Public CONNECTED_VISIBLE_LOCATION_HEADER Visible CONNECTED_VISIBLE_LOCATION_HEADER_CHANGED Visible CONNECTING Connecting COUNTRY Country CURRENT_VISIBLE_LOCATION You DIALOG_ACTION_CANCEL Dont DIALOG_ACTION_DESCRIPTION This DIALOG_ACTION_OK OK DIALOG_ACTION_OK_LOGOUT Continue DIALOG_ACTION_TITLE You DISCONNECTING Disconnecting ERROR_OCCURED An IP_UPDATING_TEXT Updating... LOAD Load LOGGING_OUT Logging LOGIN_EMAILBOX_HINT Email LOGIN_FORGOT_EMAIL_PASSWORD Forgot LOGIN_FORGOT_USERNAME_PASSWORD Forgot LOGIN_PASSWORDBOX_HINT Password LOGIN_SIGNIN_BUTTON Sign LOGIN_SIGNUP_BUTTON Sign LOGIN_USERNAMEBOX_HINT Username NOTIFICATION_CONNECTED_TEXT You NOTIFICATION_DISCONNECTED_TEXT You OK OK PING Ping RECONNECTING Reconnecting REINSTALL_TAP_DRIVER Reinstall SAVE Save SETTINGS_APPLICATION_STARTUP Application SETTINGS_APPLICATION_STARTUP_OPTION1 Do SETTINGS_APPLICATION_STARTUP_OPTION2 Connect SETTINGS_AUTO_RECONNECT Auto SETTINGS_CLOSING Closing SETTINGS_CLOSING_OPTION2 Close SETTINGS_CLOSING_OPTION3 Show SETTINGS_DIAGNOSTICS Diagnostics SETTINGS_GENERAL_KILLSWITCH_DESCRIPTION Kill SETTINGS_GENERAL_NOTIFICATIONS Show SETTINGS_KILL_SWITCH Kill SETTINGS_OTHER Other SETTINGS_PROTOCOL_IKEV2 IKEv2 SETTINGS_PROTOCOL_IKEV2_DESC Offers highly stable security, especially when switching networks or reconnecting. SETTINGS_PROTOCOL_OPENVPN OpenVPN SETTINGS_PROTOCOL_OPENVPN_DESC Provides the best security. It may be slower than other protocols due to its stronger security. OpenVPN is also good choice when other protocols are not available due to firewall restrictions. SETTINGS_PROTOCOL_OPENVPN_SCRAMBLE Scramble SETTINGS_PROTOCOL_OPENVPN_SCRAMBLE_INFO Scramble adds obfuscation capability to OpenVPN, allowing it to bypass network traffic sensors which aim to detect usage of a VPN and block it. SETTINGS_SYSTEM_STARTUP System SETTINGS_SYSTEM_STARTUP_OPTION1 Start SETTINGS_SYSTEM_STARTUP_OPTION2 Hide SETTINGS_TAB_ABOUT About SETTINGS_TAB_CONNECTION Connection SETTINGS_TAB_GENERAL General SETTINGS_TAB_LICENSES Licenses SETTINGS_TAB_LOGS Logs SETTINGS_UPDATES Updates TASKBAR_CONNECTED Status: TASKBAR_CURRENT_IP Current TASKBAR_DISCONNECTED Status: TASKBAR_HIDE_WINDOW Hide TASKBAR_SHOW_WINDOW Show UPDATE_DIALOG_DESCRIPTION {0} UPDATE_DIALOG_HEADER A UPDATE_DIALOG_INSTALL Install UPDATE_DIALOG_RELEASE_NOTES Release UPDATE_DIALOG_REMIND Remind UPDATE_DIALOG_SKIP Skip UPDATE_DIALOG_TITLE Update VERSION Version VPN_BUTTON_CONNECT Connect VPN_BUTTON_DISCONNECT Disconnect WINDOW_BUTTON_SETTINGS Preferences WINDOW_BUTTON_SIGNOUT Sign If you don't like some of the terminology used within the application, can easily modify this file to set the tone of voice you'd like your customer faceting application. Image Assets Within the Branding/ folder, you will find multiple images to replace to make the client look how you wish it to. Keep in mind, it is suggested to keep them the same size unless you intend on modifying the view XAML files to fit everything correctly. Image Description Image Filename An image of the countries on earth done in the style of a dot painting. This shows under the the text in the main application UI post-authenticate. (440x262) dotmap.png An image of the icon used for the system tray icon as well as the logo in the about screen. Ensure this is a multi-dimension (16x16 up to 512x512) .ico file. brandIcon.ico An image that acts as a banner for the top of the application. (634 x 192) imageBanner.png Library licenses The licenses.rtf file is a compilation of the licenses used for the 3rd party products used in this application. If you leave it as is, it should be fine. If you change the application logic and add any 3rd party libraries, you will need to update this file with the appropriate licenses. Building the Application and making it yours Getting the Code The code is kept in a git repository at https://github.com/wlvpn/ConsumerVPN-Windows . Clone the repository using your git client of choice on to your local machine. The solution file in the repository is named VpnSDK.WLVpn.sln. Using an instance of Visual Studio 2017 running as an administrator , open the VpnSDK.WLVpn.sln folder to begin. Configuring Visual Studio to use the WLVPN NuGet feed. Your account manager will provide you the details required to add the private WLVPN NuGet feed to your instance of Visual Studio. Using the provided details, follow the instructions provided by Microsoft here on how to add an external NuGet repository, this will allow you to use the VpnSDK package as well as others that may be required depending on your requirements. (Note: Do not follow any instructions past the linked paragraph as they are for VSTS configurations.) Changing the Branding You can change all the colors and links used by the application by changing values in the branding.xaml file. Start by changing one of the colors to something glaring and then looking at the application to better understand the relationship between the definitions and where they are used in the application. For instance, changing one of the default gray colors to Orange gives us the following. Gray to Orange <Color x:Key=\"Gray4\" options:Freeze=\"true\">Orange</Color> Another example would be changing the BRAND_CONNECTIVITY_PANEL_BACKGROUND key to Green. Connectivity Panel to Green <SolidColorBrush x:Key=\"BRAND_CONNECTIVITY_PANEL_BACKGROUND\" options:Freeze=\"true\" Color=\"Green\" /> All of these resources can be found in {PROJECT_ROOT}\\src\\VpnSDK.WLVpn\\Resources\\Branding\\ . Just as you can easily change the colors or the images by modifying the files in the Branding folder, you can modify all the text strings in the Strings.resx file. For example, if you wanted to change \"Change Location\" to \"Select a Server\", look for \"Change Location\" within the Strings.resx file and update it. As the ConsumerVPN example project uses standard string resources, you can also build multi-locale strings like any other .NET/WPF application. Building The ConsumerVPN project uses the WiX installer to handle compilation of the setup application. Please ensure you have the WiX toolset installed before going ahead. There are more detailed instructions in the Build_Installer.md and README.md files located in the root of the project. Assuming you have correctly configured the WLVPN NuGet feed as earlier instructed, you should now be able to just build the VpnSDK.WLVpn project in Visual Studio and have a live/working build. Now all that's left is for you to brand it, modify the UI how you wish and have fun building a product your customers will love."
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Quick Start | Windows WLVPN SDK",
    "keywords": "Quick Start Introduction VpnSDK is a reactive/observable library that allows developers to easily implement VPN functionality in to their application. In this quick start we will build a basic console application that authenticates with the WLVPN API, finds a VPN server to connect to and connect to it using the IKEv2 protocol. Getting Started Create a Project and Install the NuGet package Begin by creating a .NET Framework console application the standard way in Visual Studio. After your project has been created, add the NuGet package \"VpnSDK.Whitelabel\" from the WLVPN MyGet feed. Our basic console VPN application To get you up and running, shown below is the full source code for a console application that implements the functionality described in the introduction. While it might seem intimidating at first, the following sections will dissect this and explain the steps required to get up and running and what each line of code means. If you're familiar with reactive-style development, the following code may only be what you need to get started on your own application. If you're not familiar, continue reading. Code example: The full console application. using DynamicData; using System; using System.IO; using System.Linq; using VpnSDK.Public; using VpnSDK.Public.Enums; using VpnSDK.Public.Interfaces; namespace VpnSdkExample { internal class Program { private static void Main(string[] args) { ISDK sdkManager = new SDKBuilder() .SetApiKey(\"EXAMPLE_API_KEY\") .SetApplicationName(\"VPN SDK Example\") .SetAuthenticationToken(\"AUTHENTICATION_TOKEN\") .SetRasConfiguration(new RasConfiguration() { RasDeviceDescription = \"ExampleVPN\" }) .Create(); sdkManager.Login(\"demo\", \"demo\").Subscribe(status => { Console.WriteLine($\"Authentication status: {status}\"); if (status == AuthenticationStatus.Authenticated) { Console.WriteLine(\"Authenticated successfully!\"); PostLogin(sdkManager); } }, exception => { Console.WriteLine($\"Unable to authenticate. Reason: {exception.Message}\"); }); Console.ReadLine(); } private static void PostLogin(ISDK sdkManager) { // We're now logged in. // First we'll subscribe to the WhenLocationListChanged observable. // This allows the SDK to know that it needs to start watching for location changes. sdkManager.WhenLocationListChanged.Subscribe(); // Connect to the RegionList and turn it in to an observable list. var observableList = sdkManager.RegionsList.Connect().AsObservableList(); // Observe our list for changes. // For now, we just listen until the first region appears then unsubscribe. observableList.CountChanged.Subscribe(regionsAvailable => { Console.WriteLine($\"Amount of available regions updated to: {regionsAvailable}\"); if (regionsAvailable >= 2) { // Get the first region, use OfType<IRegion> if you wish to not get the IBestAvailable (this means the best region for the current user) location. IRegion region = observableList.Items.OfType<IRegion>().First(); Console.WriteLine($\"Found region! {region.City}, {region.Country}.\"); // Dispose the list since for our example, we don't want to be informed of anymore changes. observableList.Dispose(); ConnectToVPN(sdkManager, region); } }); } private static void ConnectToVPN(ISDK sdkManager, IRegion region) { Console.WriteLine(\"Starting VPN connection.\"); // Create an IConnectionConfiguration that describes how you want to connect to the ILocation. // In this example, we're just using IKEv2. IConnectionConfiguration vpnConfiguration = new RasConnectionConfigurationBuilder().SetConnectionType(NetworkConnectionType.IKEv2).Build(); sdkManager.Connect(region, vpnConfiguration).Subscribe(vpnStatus => { Console.WriteLine($\"VPN status: {vpnStatus}\"); if (vpnStatus == ConnectionStatus.Connected) { Console.WriteLine(\"Connection successful!\"); // Now disconnect and listen for the disconnect changes. sdkManager.Disconnect().Subscribe(status => { Console.WriteLine($\"Disconnect status: {status}\"); if (status == ConnectionStatus.Disconnected) { Console.WriteLine(\"Disconnected from the VPN.\"); Console.WriteLine(\"Press enter to quit.\"); } }); } }, exception => { Console.WriteLine(\"The VPN connection encountered an error.\"); Console.WriteLine($\"Error: {exception.Message}\"); }); } } } As mentioned before, this might be a lot to take in. We'll now dissect this and explain step by step what is going on and how to write this for yourself. Configuring the SDK Manager Everything in the VpnSDK library is provided through an ISDK object that provides observable methods for both WLVPN API operations and VPN connectivity. The ISDK can be thought of as your single source of truth. It is the base object that will handle everything, and be your main source of data. You create one instance and use that throughout your entire application lifetime. Before we get in to using the ISDK object (also referred as the SDK manager), we need to actually construct it first. To construct an ISDK object, we provide a SDKBuilder that uses the standard builder pattern to configure and construct the ISDK object. Let's start by doing the bare minimum. Code example: Creating an ISDK object using the configuration builder. ISDK sdkManager = new SDKBuilder().Create(); As you'll see quickly, upon execution this will throw an exception informing you that you did not configure the required parameters. The method called at the end of this chain .Create() is always the last one to be called and before it, should be the configuration of your SDK object. Let's start by configuring it with an API key (this is provided by your WLVPN account manager). Code example: Creating an ISDK object using the configuration builder and configuring an API key. ISDK sdkManager = new SDKBuilder().SetApiKey(\"ExampleAPIKeyHere\").Create(); Unfortunately again, you will see this throws an exception about there still being missing parameters. We'll expand this further by configuring the authentication token (provided by your account manager), setting the application name. Code example: Creating an ISDK object using the configuration builder and configuring the mandatory parameters. ISDK sdkManager = new SDKBuilder() .SetApiKey(\"ExampleAPIKeyHere\") .SetAuthenticationToken(\"@authToken\") .SetApplicationName(\"VpnSDK Console Example\") .Create(); For a final time, you're going to an exception on create but notice this time, the exception is telling you that you have not added any VPN configuration settings. As our example application only intends to use IKEv2, we need to use the method .SetRasConfiguration() . RAS (Remote Access Services) refers to the Windows provided VPN API that handles IKEv2, SSTP and L2TP connections. To use those, it requires what is referred to as a \"Device Description\" which is just Microsoft phrasing for the name of the connection. You generally want to refer to your connection name as a single word that reflects your brand name. Knowing this now, let's configure the ability to use IKEv2 with our SDK manager and finally have an instance of ISDK that we can use. Code example: Creating an ISDK object using the configuration builder and configuring the mandatory parameters as well as the RAS configuration. ISDK sdkManager = new SDKBuilder() .SetApiKey(\"ExampleAPIKeyHere\") .SetAuthenticationToken(\"@authToken\") .SetApplicationName(\"VpnSDK Console Example\") .SetRasConfiguration(new RasConfiguration() { RasDeviceDescription = \"ExampleVPN\" }) .Create(); We now have a working ISDK object we can use and move forward with. Next, we'll go in to how to authenticate a user with the WLVPN API. Logging a user in Now that the ISDK object has been created, we can start using the reactive methods provided to login to the API. Reactive methods are asynchronous functions that expect a delegate/callback to handle when something has updated or when an error has occurred. The method used to begin a login attempt is .Login(\"username\",\"password\"); . Code example: Using the login method and subscribing to the result to monitor whether the user was able to log in or not. sdkManager.Login(\"demo\", \"user\").Subscribe(status => { Console.WriteLine($\"Authentication status: {status}\"); if (status == AuthenticationStatus.Authenticated) { Console.WriteLine(\"Authenticated successfully!\"); } }, exception => { Console.WriteLine($\"Unable to authenticate. Reason: {exception.Message}\"); }); As you can see, it's fairly simple, we have one delegate that prints to the console if the authentication status has updated, checks if the status is now AuthenticationStatus.Authenticated and prints a congratulatory message. The second delegate checks if an exception/error was thrown during authentication (e.g. if the username or password was wrong) and prints out a message informing so that includes the message returned by the API. These messages are considered user friendly so in your application if you wish to present the reason it failed to the user, do not be afraid to use exception.Message . You may have noticed something wrong though, your application exists instantly before the login can complete. At the end of your private static void Main(string[] args) method, add a a Console.ReadLine() so your console application only closes when you press Enter . Now with that out of the way, we can see in our console that the authentication occurs and we're told whether it connected or if it failed. The SDK manager is now in a state where all the other methods on it are able to actually do something as API connectivity has been configured and we have a user authenticated. To help us keep all our code related to what to do post-login, create the following function under Main() . We make sure to pass a copy of our SDK manager, you could keep this as a global static object if you wished, in a real-world application you'd most likely have this set up in an IoC container (e.g. SimpleInjector). private static void PostLogin(ISDK sdkManager) { } Finally, after the line Console.WriteLine(\"Authenticated successfully!\") add a call to PostLogin() like so: PostLogin(sdkManager); We now have a PostLogin(ISDK sdkManager) method that will only be called when the SDK manager has authenticated. All future logic that needs a connected SDK manager is placed within the PostLogin method. Retrieving Regions/Locations Once logged in, we can now start retrieving all the available locations the end user can connect to. This is provided through a DynamicData SourceList that updates itself automatically when there are changes on the API side. Unless you're very familiar with how the DynamicData library works, you will most likely want to just convert this to an ObservableList . This functionality is built in and very easily done. To keep things simple, we will do that and work from there. A caveat with this approach is you must have a subscription to WhenLocationListChanged to inform the SDK manager that something is listening for location updates and to start updating the RegionsList observable. It is suggested that you use WhenLocationListChanged which can be seen used in the ConsumerVPN example but for this console application we will keep things simple. Code example: Converting the RegionsList in to a standard ObservableList . private static void PostLogin(ISDK sdkManager) { // First we'll subscribe and start listening for server changes. // This allows the SDK to know that it needs to start watching for server changes. sdkManager.WhenLocationListChanged.Subscribe(); // Connect to the RegionList and turn it in to an observable list. var observableList = sdkManager.RegionsList.Connect().AsObservableList(); } You may have noticed we needed to call Connect() first. Since it's a live collection, we connect to it and it updates itself, rather than subscribing to an event stream. We now have our good old fashioned observable list. In a GUI application you could use this to bind it to a UI element or you could apply filters after running Connect() to restrict the end result observable list only having certain countries or locations. Since this is just a simple example, all we want to do is observe the list, find when it is populated and connect to the first region available. The ObservableList type provides another observable of it's own that allows us to subscribe to when the amount of items in the collection have changed. This property is called CountChanged . Code example: Subscribing to the observable list of regions and finding when there are more than 2 regions available. observableList.CountChanged.Subscribe(regionsAvailable => { Console.WriteLine($\"Amount of available regions updated to: {regionsAvailable}\"); if (regionsAvailable >= 2) { Console.WriteLine(\"There are more than two regions available!\"); } }); Now that we have a way of knowing that there are a good amount of regions available in the observable list, let's get the first region in the list. Code example: Getting the first region from our observable list. observableList.CountChanged.Subscribe(regionsAvailable => { Console.WriteLine($\"Amount of available regions updated to: {regionsAvailable}\"); if (regionsAvailable >= 2) { // Get the first region, use OfType<IRegion> if you wish // to not get an IBestAvailable object.IBestAvailable is a region // that represents the best server for the user to connect to. IRegion region = observableList.Items.OfType<IRegion>().First(); Console.WriteLine($\"Found region! {region.City}, {region.Country}.\"); } }); The .OfType<IRegion>() might throw you off at first. This is because the first object you get from the region list is an IBestLocation object that acts like a location but when passed to the VPN connection methods, automatically gets converted in to what the current best region for the user to connect to (based off region load as well as distance). If you run your console application now, you should see that you found a region. The first one that generally appears is Toronto, Canada but this doesn't matter. As you build your real application, you can use the Sort() and Filter() methods on the observable list to sort and represent the regions in your preferred way. One simple example might be filtering out any regions with the country code AU if you do not wish for your users to be able to connect to Australia. With an IRegion object at your disposal, we now have everything we need to establish a VPN connection. Before we go on to the next step, like in the previous section (Logging a user in), we're going to create a new static method in our application where we can keep our VPN connection logic in. Create the following static method: private static void ConnectToVPN(ISDK sdkManager, IRegion region) { } We also need to do two last things, before we call ConnectToVPN() after getting our IRegion object, we need to dispose the observable list. By doing so, this ensures no further subscription callbacks happen as disposing an observable stops any future delegate execution attempts. In a standard application you would tend to not dispose but since our application is very \"Do X then Y then Z\", we don't want to accidentally call ConnectToVPN() twice. Update your CountChanged subscriber to the following to both dispose and call the ConnectToVPN() method. Code example: Final implementation of the CountChanged subscriber for our observable region list. observableList.CountChanged.Subscribe(regionsAvailable => { Console.WriteLine($\"Amount of available regions updated to: {regionsAvailable}\"); if (regionsAvailable >= 2) { // Get the first region, use OfType<IRegion> if you wish // to not get an IBestAvailable object.IBestAvailable is a region // that represents the best server for the user to connect to. IRegion location = observableList.Items.OfType<IRegion>().First(); // Dispose the list which will in turn cancel the subscription. observableList.Dispose(); Console.WriteLine($\"Found region! {location.City}, {location.Country}.\"); StartConnection(location); } }); Connecting to a Region Now that you have an IRegion object that you wish to connect to, we will use the .Connect(region, configuration) method on the SDK manager. This returns an observable VPN connection that allows you to observe the connection status as well as any errors that occur. You may have noticed that Connect requires a configuration parameter, per-connection you must create this object based on what type of VPN protocol you want to use. In this quick-start since we are planning to use IKEv2, we will use the RasConnectionBuilder class (remember RAS from constructing the ISDK object?) to create our configuration. Refer to the following code example as a way to create a simple IKEv2 configuration. IConnectionConfiguration vpnConfiguration = new RasConnectionConfigurationBuilder().SetConnectionType(NetworkConnectionType.IKEv2).Build(); With both our IRegion and IConnnectionConfiguration objects prepared, we can connect. Just like the login method, you subscribe to the result of Connect() and provide a delegate to handle updates of the VPN connection and a delegate to handle any errors. For our console application we will use the following as a simple example that writes to the console the VPN connection status and checks if it was successful, if so, print a special message and then disconnects. If there was an error connecting or the connection fails while it's connected, we will write that to the console as well. Since we don't want to create an application that creates a VPN application and then it stays connected forever for our example, we're going to subscribe to the Connect() method and when the status is ConnectionStatus.Connected we will run a Disconnect() in there and subscribe to that. You can observe new observables in the observation of your current observables. It can get pretty crazy. While it might be intimidating at first, this is no different than how we use .Login() earlier. Code example: Connecting to an IKEv2 VPN with an IConnectionConfiguration object and an IRegion followed by a disconnect if the connection process had no issues. sdkManager.Connect(region, vpnConfiguration).Subscribe(vpnStatus => { Console.WriteLine($\"VPN status: {vpnStatus}\"); if (vpnStatus == ConnectionStatus.Connected) { Console.WriteLine(\"Connection successful!\"); // Now disconnect and listen for the disconnect changes. sdkManager.Disconnect().Subscribe(status => { Console.WriteLine($\"Disconnect status: {status}\"); if (status == ConnectionStatus.Disconnected) { Console.WriteLine(\"Disconnected from the VPN.\"); Console.WriteLine(\"Press enter to quit.\"); } }); } }, exception => { Console.WriteLine(\"The VPN connection encountered an error.\"); Console.WriteLine($\"Error: {exception.Message}\"); }); We now have a complete console application that authenticates, finds a region to connect to, establishes a VPN connection and disconnects and all within the restrictions that developing for a console application provides without issue. Conclusion As the guide has shown, the abstractions provided to you with VpnSDK makes everything about integrating WLSDK API and VPN functionality simple. While the quick start guide doesn't cover all the features provided by VpnSDK (they are covered in other articles), you should now have a launching point on how to get started with your own application. Provided with your WLVPN VpnSDK package are two example WPF applications built as a reference guide on how we at WLVPN use the VpnSDK in our own applications."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "WLVPN VpnSDK .NET Guides | Windows WLVPN SDK",
    "keywords": "WLVPN VpnSDK .NET Guides Provided for you are guides and articles written by the WLVPN team to help you integrate VpnSDK rapidly in to your project and gain a better understanding of all the features provided by VpnSDK."
  },
  "api/VpnSDK.Public.Interfaces.IServer.html": {
    "href": "api/VpnSDK.Public.Interfaces.IServer.html",
    "title": "Interface IServer | Windows WLVPN SDK",
    "keywords": "Interface IServer Interface IServer. Describes a single server as an ILocation . Inherited Members ILocation.Id ILocation.CountryCode ILocation.CityCode ILocation.SearchName Namespace : VpnSDK.Public.Interfaces Assembly : VpnSDK.dll Syntax public interface IServer : ILocation Properties City Gets the city of the location to connect to. This field may be empty on some location objects. Declaration string City { get; } Property Value Type Description String Country Gets the country of the location to connect to. Declaration string Country { get; } Property Value Type Description String Hostname Gets servers hostname. Declaration string Hostname { get; } Property Value Type Description String Ip Gets servers IP address. Declaration IPAddress Ip { get; } Property Value Type Description IPAddress Load Gets the user load of the region. Higher values mean that the server is nearing capacity. Declaration ushort? Load { get; } Property Value Type Description Nullable < UInt16 > The current user load between 0% to 100% as a flattened value. See Also ILocation"
  },
  "api/VpnSDK.Public.html": {
    "href": "api/VpnSDK.Public.html",
    "title": "Namespace VpnSDK.Public | Windows WLVPN SDK",
    "keywords": "Namespace VpnSDK.Public Classes OpenVpnConfiguration Class OpenVpnConfiguration. Describes the OpenVPN application configuration for the application. OpenVpnConnectionConfigurationBuilder Class OpenVpnConnectionConfigurationBuilder. Builder for an OpenVPN IConnectionConfiguration object. PositionInfoEventArgs Class PositionInfoEventArgs. Provides information about the users current position info. RasConfiguration Class RasConfiguration. Describes the RAS configuration used for RAS-based ( IKEv2 / SSTP ) VPN connections. RasConnectionConfigurationBuilder Class RasConnectionConfigurationBuilder. Builder for a RAS-based IConnectionConfiguration object. SDKBuilder Class SDKBuilder. Used to build an instance of an ISDK ."
  },
  "api/VpnSDK.Public.Extensions.ExceptionExtensions.html": {
    "href": "api/VpnSDK.Public.Extensions.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | Windows WLVPN SDK",
    "keywords": "Class ExceptionExtensions ExceptionExtentions class. Inheritance Object ExceptionExtensions Namespace : VpnSDK.Public.Extensions Assembly : VpnSDK.dll Syntax public static class ExceptionExtensions Methods GetAllExceptionMessages(Exception) Gets all exception messages. Declaration public static IEnumerable<string> GetAllExceptionMessages(this Exception ex) Parameters Type Name Description Exception ex The exception. Returns Type Description IEnumerable < String > IEnumerable<System.String>. GetAllExceptions(Exception) Gets all inner exceptions. Declaration public static IEnumerable<Exception> GetAllExceptions(this Exception ex) Parameters Type Name Description Exception ex The exception. Returns Type Description IEnumerable < Exception > IEnumerable<Exception>."
  },
  "api/VpnSDK.Public.Exceptions.VpnSDKEmptyAvailableVpnProtocolsException.html": {
    "href": "api/VpnSDK.Public.Exceptions.VpnSDKEmptyAvailableVpnProtocolsException.html",
    "title": "Class VpnSDKEmptyAvailableVpnProtocolsException | Windows WLVPN SDK",
    "keywords": "Class VpnSDKEmptyAvailableVpnProtocolsException Exception VpnSDKEmptyAvailableVpnProtocolsException. Fires when SDK construction has detected that no VPN protocols are available on the machine due to OS configuration issues or misconfiguration of the SDK. Inheritance Object Exception VpnSDKBaseException VpnSDKEmptyAvailableVpnProtocolsException Implements ISerializable _Exception Namespace : VpnSDK.Public.Exceptions Assembly : VpnSDK.dll Syntax public class VpnSDKEmptyAvailableVpnProtocolsException : VpnSDKBaseException, ISerializable, _Exception Constructors VpnSDKEmptyAvailableVpnProtocolsException(String) Initializes a new instance of the VpnSDKEmptyAvailableVpnProtocolsException class. Declaration public VpnSDKEmptyAvailableVpnProtocolsException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnSDKEmptyAvailableVpnProtocolsException(String, Exception) Initializes a new instance of the VpnSDKEmptyAvailableVpnProtocolsException class. Declaration public VpnSDKEmptyAvailableVpnProtocolsException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties ErrorCode Gets the error code. Declaration public override int ErrorCode { get; } Property Value Type Description Int32 The error code. Overrides VpnSDKBaseException.ErrorCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ExceptionExtensions.GetAllExceptions(Exception) ExceptionExtensions.GetAllExceptionMessages(Exception) See Also Exception VpnSDKBaseException"
  }
}